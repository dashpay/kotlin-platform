plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.google.protobuf'
    id('io.gitlab.arturbosch.detekt').version("1.19.0")
    id 'maven-publish'
    id 'signing'
}

group 'org.dashj.platform'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':dash-sdk-java')
    implementation "org.dashj:dashj-core:$dashj_version"
    implementation 'org.json:json:20190722'
    implementation 'com.google.guava:guava:29.0-android'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    implementation 'com.google.protobuf:protobuf-javalite:3.21.7'

    testImplementation 'org.slf4j:slf4j-jdk14:1.7.30'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation 'co.nstant.in:cbor:0.8'
    implementation 'com.squareup.retrofit2:retrofit:2.6.4'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.4'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    testImplementation 'com.squareup.retrofit2:retrofit-mock:2.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1"
    implementation 'io.grpc:grpc-stub:1.54.0' // CURRENT_GRPC_VERSION
    implementation 'io.grpc:grpc-netty-shaded:1.54.0'  // replace with the latest version
}

protobuf {
    protoc {
        if (osdetector.os == "osx") {
            artifact = 'com.google.protobuf:protoc:3.21.1:osx-x86_64'
        } else {
            artifact = 'com.google.protobuf:protoc:3.21.1'
        }
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.builtins {
                remove java
                java { option 'lite' }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs += 'build/generated/source/proto/main/java'
        }
        kotlin {
            srcDirs += 'build/generated/source/proto/main/java'
        }
        proto {
            srcDirs += 'src/main/proto' // default value
        }
    }
}

test {
    useJUnitPlatform()
    systemProperty "java.library.path", "../dash-sdk-java/build/cmake"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // or DuplicatesStrategy.WARN
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'dash-sdk-kotlin'
            version project.rootProject.ext.version
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Higher level Dash SDK for Kotlin'
                description = 'High Level Dash SDK Java Library for Platform'
                url = 'httsp://dashj.org'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hashengineering'
                        name = 'HashEngineering'
                        email = 'hashengineeringsolutions@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/HashEngineering/kotlin-platform.git'
                    developerConnection = 'scm:git:ssh://github.com/HashEngineering/kotlin-platform.git'
                    url = 'http://github.com/HashEngineering/kotlin-platform.git'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = project.rootProject.ext.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):''
                password = project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):''
            }
        }
    }
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// apply from: 'ktlint.gradle'