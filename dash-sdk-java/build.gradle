plugins {
    id 'java'
//    id 'org.gradle.model' version '0.5'
    id 'cpp'
    id("dev.welbyseely.gradle-cmake-plugin") version "0.1.0"

    id 'maven-publish'
    id 'jacoco'
    id 'signing'
}

//version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.dashj:dashj-core:20.0.5-CJ-SNAPSHOT'
}

cmake {
    sourceFolder=file("$projectDir/src/main/cpp")
}

// TODO: move this to the cmake project
task generateSWIG(type: Exec) {
    // Define the input directory where your .i files are located
    def swigInputDir = "${projectDir}/src/main/swig"

    // Define the output directory for the generated Java and C/C++ files
    def javaOutputDir = "${buildDir}/generated/java/org/dashj/platform/sdk"
    def cppOutputDir = "${buildDir}/generated/cpp"

    // Create the output directories if they don't already exist
    file(javaOutputDir).mkdirs()
    file(cppOutputDir).mkdirs()

    // execute ignore.py
    commandLine 'python3', 'ignore.py'

    // Command to execute SWIG
    // Make sure to adjust the parameters according to your needs
    commandLine 'swig', '-java', '-c++',
            '-outdir', javaOutputDir,
            '-package', 'org.dashj.platform.sdk',
            '-o', "${cppOutputDir}/sdk.cpp",
            '-I${swigInputDir}', // Include directory for SWIG interfaces
            "${swigInputDir}/root.i" // SWIG interface file


    // Ensure that this task is run before compiling the sources
    tasks.compileJava.dependsOn generateSWIG
}

// Ensure that the generated Java sources are included in compilation
sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/java"
        }
    }
}
tasks.named('compileJava').configure { dependsOn 'cmakeBuild' }
//tasks.named('cmakeBuild').configure { dependsOn 'generateSWIG' }
//compileJava.dependsOn cmakeBuild
//cmakeBuild.dependsOn generateSWIG


test {
    useJUnitPlatform()
    systemProperty "java.library.path", "build/cmake"
    println(systemProperties["java.library.path"])
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'dash-sdk-java'
            version project.rootProject.ext.version
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Dash SDK for Java'
                description = 'Dash SDK Java Library for Platform'
                url = 'httsp://dashj.org'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hashengineering'
                        name = 'HashEngineering'
                        email = 'hashengineeringsolutions@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/HashEngineering/kotlin-platform.git'
                    developerConnection = 'scm:git:ssh://github.com/HashEngineering/kotlin-platform.git'
                    url = 'http://github.com/HashEngineering/kotlin-platform.git'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = project.rootProject.ext.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):''
                password = project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):''
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

assemble.dependsOn(publishToMavenLocal)
assemble.dependsOn(sourcesJar)

// jacocoTestReport {
//     dependsOn test // tests are required to run before generating the report
//     reports {
//         xml.enabled true
//         xml.destination file("${project.projectDir}/build/reports/jacoco/jacoco.xml")
//     }
// }